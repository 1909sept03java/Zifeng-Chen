--start
--DB CREATION SCRIPTS OFTER BEGIN WITH DROP STATEMENTS
--AVOIDS CLASSES WITH EXISTING TABLE

DROP TABLE BEAR;
/
DROP TABLE BEAR_TYPE;
/
DROP TABLE CAVE;
/
DROP TABLE BEEHIVE;
/
DROP TABLE BEAR_BEEHIVE;


--TABLE CREATION BEGINS HERE
CREATE TABLE BEAR_TYPE(
    BEAR_TYPE_ID INTEGER PRIMARY KEY,
    BEAR_TYPE_NAME varchar2(100)
    );
/
Create table CAVE
(
    CAVE_ID INTEGER PRIMARY KEY,
    CAVE_NAME varchar2(100),
    MAX_BEARS INTEGER DEFAULT 4
    );
/
create table BEAR
(
    BEAR_ID INTEGER PRIMARY KEY,
    BEAR_NAME VARCHAR2(100),
    BIRTHDATE DATE,
    WEIGHT  NUMBER(6,2) DEFAULT 200.00,
    BEAR_TYPE_ID INTEGER NOT NULL, --NOT NULL CONSTRAINT TO THIS COLUMN, FOREIGN KEY
    CAVE_ID INTEGER -- WILL BE A NULLABLE FOREIGN KEY
    );
/
create table BEEHIVE
(
    BEEHIVE_ID INTEGER PRIMARY KEY,
    HONEY_AMY NUMBER(5,2) DEFAULT 75.00
    );
/
create table BEAR_BEEHIVE
(
    BEAR_ID INTEGER,
    BEEHIVE_ID INTEGER,
    PRIMARY KEY(BEAR_ID, BEEHIVE_ID)
    );
/
--FOREIGN KEY CONSTRAINTS 

--CONSTRAINT: RULE PLACED ON THE CONTENTS OF A TABLE, LIMITING WHAT MAY BE INSERTED
--TYPES OF CONSTRAINTS: CHECK (INCLUDES NOT NULL), UNIQUE, PRIMARY KEY, FOREIGN KEY

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_BEAR_TYPE
FOREIGN KEY (BEAR_TYPE_ID) REFERENCES BEAR_TYPE(BEAR_TYPE_ID);
/

ALTER TABLE BEAR
ADD CONSTRAINT FK_BEAR_CAVE
FOREIGN KEY (CAVE_ID) REFERENCES CAVE(CAVE_ID);
/

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEAR
FOREIGN KEY (BEAR_ID) REFERENCES BEAR(BEAR_ID);
/

ALTER TABLE BEAR_BEEHIVE
ADD CONSTRAINT FK_BEAR_BEEHIVE_BEEHIVE
FOREIGN KEY (BEEHIVE_ID) REFERENCES BEEHIVE(BEEHIVE_ID);
/

--ADD SOME DATE - BE CAREFUL ABOUT INSERTION ORDER
--TWO WAYS TO ADD: BY FILIING ALL COLUMN OR SPECIFY WHICH COLUMNS TO FILL
INSERT INTO BEAR_TYPE VALUES(1,'GRIZZLY');
INSERT INTO BEAR_TYPE (BEAR_TYPE_ID,BEAR_TYPE_NAME) VALUES (2, 'SUN');

INSERT ALL
    INTO CAVE
        VALUES(1,'QUEENS COLLEGE',15)
    INTO CAVE (CAVE_ID,CAVE_NAME)
        VALUES(37,'AWESOME CAVE')
SELECT * FROM DUAL;

INSERT ALL
    INTO BEAR(BEAR_ID,BEAR_NAME,BIRTHDATE,BEAR_TYPE_ID,CAVE_ID)
        VALUES (72,'BARRY',TO_DATE('2000-10-08','YYYY-MM-DD'),1,37)
        
    INTO BEAR(BEAR_ID,BEAR_NAME,BIRTHDATE,BEAR_TYPE_ID,CAVE_ID)
        VALUES (2,'BOB',TO_DATE('2000-07-31','YYYY-MM-DD'),2,37)
        
    INTO BEAR(BEAR_ID,BEAR_NAME,BIRTHDATE,BEAR_TYPE_ID,CAVE_ID)
        VALUES (8,'BERNEICE',TO_DATE('1980-09-08','YYYY-MM-DD'),1,1)
        
    INTO BEAR(BEAR_ID,BEAR_NAME,BIRTHDATE,WEIGHT,BEAR_TYPE_ID,CAVE_ID)
        VALUES (45,'BERNEICE',TO_DATE('2005-03-08','YYYY-MM-DD'),600.00,1,37)
    
    INTO BEAR(BEAR_ID,BEAR_NAME,BIRTHDATE,BEAR_TYPE_ID,CAVE_ID)
        VALUES (89,'YOGI',TO_DATE('1958-08-18','YYYY-MM-DD'),2,1)

SELECT * FROM DUAL;    

INSERT INTO BEAR(BEAR_ID,BEAR_NAME,BIRTHDATE,BEAR_TYPE_ID)
    VALUES (56,'BILL', TO_DATE('2000-10-18','YYYY-MM-DD'),1);
    

UPDATE BEAR
    SET CAVE_ID = 1
WHERE CAVE_ID IS NULL;

SELECT CAVE_ID,COUNT(CAVE_ID) from BEAR GROUP BY CAVE_ID;

SELECT CAVE_NAME  , COUNT(BEAR.CAVE_ID) 
FROM BEAR
    INNER JOIN CAVE ON BEAR.CAVE_ID = CAVE.CAVE_ID
GROUP BY CAVE_NAME, BEAR.CAVE_ID;
    


