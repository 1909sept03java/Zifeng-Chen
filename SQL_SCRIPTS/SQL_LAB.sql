--2.1
SELECT * FROM EMPLOYEE;

SELECT * FROM EMPLOYEE 
    WHERE LASTNAME = 'King';

SELECT * FROM EMPLOYEE
    WHERE FIRSTNAME = 'Andrew' and REPORTSTO IS NULL;
    
--2.2
SELECT * FROM ALBUM
ORDER BY TITLE DESC;

SELECT * FROM CUSTOMER 
ORDER BY CITY ASC;

--2.3
INSERT INTO Genre (GenreId, Name) VALUES (26, 'Genre1');
INSERT INTO Genre (GenreId, Name) VALUES (27, 'Genre2');

INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) 
    VALUES (9, 'Wi', 'Tu Lo', 'IT Staff', 6, TO_DATE('1968-1-9 00:00:00','yyyy-mm-dd hh24:mi:ss'), 
        TO_DATE('2004-3-4 00:00:00','yyyy-mm-dd hh24:mi:ss'), '923 7 ST NW', 'Lethbridge', 'AB', 'Canada', 'T1H 1Y8',
            '+1 (403) 467-3367', '+1 (403) 467-8782', 'WiTuLo@chinookcorp.com');
            
INSERT INTO Employee (EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State, Country, PostalCode, Phone, Fax, Email) 
    VALUES (10, 'Ho', 'Lee Phouc', 'IT Staff', 6, TO_DATE('1968-1-9 00:00:00','yyyy-mm-dd hh24:mi:ss'), 
        TO_DATE('2004-3-4 00:00:00','yyyy-mm-dd hh24:mi:ss'), '923 7 ST NW', 'Lethbridge', 'AB', 'Canada', 'T1H 1Y8',
            '+1 (403) 467-2351', '+1 (403) 467-9772', 'HoLeePhouc@chinookcorp.com');
            
INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, Country, PostalCode, Phone, Email, SupportRepId) 
    VALUES (60, 'LMU', 'Raja', '11,Raj Bhavan Road', 'Bangalore', 'India', '560001', '+91 080 22281299', 'Raja@yahoo.in', 3);
    
INSERT INTO Customer (CustomerId, FirstName, LastName, Address, City, State,  Country, PostalCode, Phone, Email, SupportRepId) 
    VALUES (61, 'Chen', 'Zifeng', '22,173 Street', 'New York', 'NY' ,'USA', '18012', '+1 516 6470730', 'zifengchen888@gmail.com', 5);
 
 --2.4
UPDATE CUSTOMER
    SET FIRSTNAME = 'Robert' , LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' and LASTNAME = 'Mitchell';

UPDATE ARTIST
    SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

--2.5
SELECT * FROM INVOICE
    WHERE BILLINGADDRESS LIKE 'T%';
    
--2.6
SELECT * FROM INVOICE
    WHERE TOTAL BETWEEN 15 AND 50;

SELECT * FROM EMPLOYEE
    WHERE HIREDATE BETWEEN TO_DATE('2003-06-01 00:00:00','yyyy-mm-dd hh24:mi:ss')
        and TO_DATE('2004-03-01 00:00:00','yyyy-mm-dd hh24:mi:ss');
    
--2.7
ALTER TABLE INVOICE DROP
    CONSTRAINT FK_INVOICECUSTOMERID;
 
ALTER TABLE INVOICE ADD
    CONSTRAINT FK_INVOICECUSTOMERID
    FOREIGN KEY (CustomerId)
    REFERENCES Customer (CustomerId)
    ON DELETE CASCADE;
    
ALTER TABLE INVOICELINE DROP
    CONSTRAINT FK_INVOICELINEINVOICEID;
 
ALTER TABLE INVOICELINE ADD
    CONSTRAINT FK_INVOICELINEINVOICEID
    FOREIGN KEY (InvoiceId) 
    REFERENCES Invoice (InvoiceId)
    ON DELETE CASCADE;    
    
DELETE FROM CUSTOMER WHERE LASTNAME = 'Walter' AND FIRSTNAME = 'Robert';

--3.1
create or replace function getSysdate
return date is
  l_sysdate date;
begin
  select sysdate
    into l_sysdate
    from dual;
  return l_sysdate;
end;

CREATE OR REPLACE FUNCTION GET_LENGTH(M_ID IN NUMBER)
RETURN NUMBER IS
    OUTPUT NUMBER;
BEGIN
    SELECT LENGTH(NAME) INTO OUTPUT FROM MEDIATYPE WHERE MEDIATYPEID = M_ID;
    RETURN(OUTPUT);
END;

--3.2
CREATE OR REPLACE FUNCTION MOST_EXPENSIVE
RETURN NUMBER IS
    OUTPUT NUMBER;
BEGIN
    SELECT MAX(UNITPRICE) INTO OUTPUT FROM TRACK;
    RETURN (OUTPUT);
END;

--3.3
CREATE OR REPLACE FUNCTION AVERAGE_INVOICE
RETURN NUMBER IS
    OUTPUT NUMBER;
BEGIN
    SELECT AVG(UNITPRICE) INTO OUTPUT FROM INVOICELINE;
    RETURN (OUTPUT);
END;

--3.4
CREATE OR REPLACE FUNCTION BORN_AFTER
RETURN SYS_REFCURSOR IS 
    TESTER SYS_REFCURSOR;
BEGIN
    OPEN TESTER FOR 
        SELECT * FROM EMPLOYEE
            WHERE BIRTHDATE > '01-JAN-1968';
    RETURN TESTER;
END;
/
SELECT BORN_AFTER from DUAL;-- FROM DUAL

--4.1
CREATE OR REPLACE PROCEDURE GETNAMES( OUTPUT OUT SYS_REFCURSOR)
IS 
    BEGIN
        OPEN OUTPUT FOR SELECT FIRSTNAME, LASTNAME FROM EMPLOYEE;
END;
/* TEST REMOVE LATER
DECLARE 
    PTR SYS_REFCURSOR;
    FIRST_NAME EMPLOYEE.FIRSTNAME%TYPE; 
    LAST_NAME EMPLOYEE.LASTNAME%TYPE;
BEGIN
    GETNAMES(PTR);
    LOOP
    FETCH PTR INTO FIRST_NAME, LAST_NAME; 
    EXIT WHEN PTR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE('First Name : '||FIRST_NAME||', Last Name: '||LAST_NAME);
    END LOOP;
    CLOSE PTR;
END;
*/

--4.2
CREATE OR REPLACE PROCEDURE UPDATE_EMPL(E_ID IN NUMBER, L_NAME IN VARCHAR2, 
    F_NAME IN VARCHAR2, ADD_RESS IN VARCHAR2, CI_TY IN VARCHAR2, STA_TE IN VARCHAR2, 
        COUN_TRY IN VARCHAR2, ZIP_CODE IN VARCHAR2, P_NUM IN VARCHAR2, F_NUM IN VARCHAR2, E_MAIL IN VARCHAR2)
IS
BEGIN
    UPDATE EMPLOYEE SET LASTNAME = L_NAME, FIRSTNAME = F_NAME, 
    ADDRESS = ADD_RESS, CITY = CI_TY, STATE = STA_TE, COUNTRY = COUN_TRY, 
    POSTALCODE = ZIP_CODE, PHONE = P_NUM, FAX = F_NUM, EMAIL = E_MAIL
    WHERE EMPLOYEEID = E_ID;
    COMMIT;
END;

CREATE OR REPLACE PROCEDURE GET_MANAGER(E_ID IN NUMBER, M_ID OUT NUMBER)
IS
BEGIN
    SELECT REPORTSTO INTO M_ID FROM EMPLOYEE 
    WHERE EMPLOYEEID = E_ID;
END;

--4.3
CREATE OR REPLACE PROCEDURE CUST_INFO(CUST_ID IN NUMBER, F_NAME OUT VARCHAR2, L_NAME OUT VARCHAR2, COM_P OUT VARCHAR2)
IS
BEGIN
    SELECT FIRSTNAME INTO F_NAME FROM CUSTOMER
        WHERE CUSTOMERID = CUST_ID;
    SELECT LASTNAME INTO L_NAME FROM CUSTOMER
        WHERE CUSTOMERID = CUST_ID;
    SELECT COMPANY INTO COM_P FROM CUSTOMER
        WHERE CUSTOMERID = CUST_ID;
END;

--5.0
--CASCADE DELETE ALREADY ADDED
CREATE OR REPLACE PROCEDURE INV_DEL(I_ID IN NUMBER)
IS
BEGIN
    DELETE FROM INVOICELINE WHERE INVOICEID = I_ID;

    DELETE FROM INVOICE WHERE INVOICEID = I_ID; --Have to delete it from everywhere to avoid the constraint. 
END;

--EXECUTE INV_DEL(113);

--6.1
CREATE OR REPLACE TRIGGER INSERT_EMPLOYEE
AFTER INSERT ON EMPLOYEE
BEGIN
    DBMS_OUTPUT.PUT_LINE('TRIGGER FOR INSERT EMPLOYEE');
END;
/
CREATE OR REPLACE TRIGGER INSERT_ALBUM
AFTER INSERT ON ALBUM
BEGIN
    DBMS_OUTPUT.PUT_LINE('TRIGGER FOR INSERT ALBUM');
END;
/
CREATE OR REPLACE TRIGGER DELETE_CUSTOMER
AFTER DELETE ON CUSTOMER
BEGIN
    DBMS_OUTPUT.PUT_LINE('TRIGGER FOR DELETE CUSTOM');
END;

--7.1
SELECT FIRSTNAME, LASTNAME, INVOICEID 
    FROM CUSTOMER C
        JOIN INVOICE I ON C.CUSTOMERID = I.CUSTOMERID
            ORDER BY C.LASTNAME;
            
-- 7.2
SELECT FIRSTNAME, LASTNAME, INVOICEID, TOTAL 
    FROM CUSTOMER C
        FULL OUTER JOIN INVOICE I ON C.CUSTOMERID = I.CUSTOMERID
ORDER BY C.LASTNAME;

--7.3
SELECT NAME, TITLE 
    FROM ALBUM AL
        RIGHT JOIN ARTIST AR ON AL.ARTISTID = AR.ARTISTID
ORDER BY NAME;

--7.4
SELECT NAME, TITLE 
    FROM ALBUM AL
        CROSS JOIN ARTIST AR
ORDER BY NAME ASC;

--7.5
--stackexchange
SELECT
    (A.FIRSTNAME || A.LASTNAME) EMPLOYEE,
    (B.FIRSTNAME || B.LASTNAME) REPORTSTO
    FROM EMPLOYEE A
        LEFT JOIN EMPLOYEE B ON A.REPORTSTO = B.EMPLOYEEID;
